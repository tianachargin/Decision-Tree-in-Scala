{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red219\green39\blue218;\red86\green32\blue244;\red255\green0\blue0;
}
{\*\expandedcolortbl;;\csgenericrgb\c85882\c15294\c85490;\csgenericrgb\c33725\c12549\c95686;\csgenericrgb\c100000\c0\c0;
}
\margl1440\margr1440\vieww25520\viewh14640\viewkind0
\deftab720
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f0\fs22 \cf0 \
import org.apache.spark.mllib.linalg._\
\
import org.apache.spark.mllib.regression._\
\
import org.apache.spark.mllib.evaluation._\
\
import org.apache.spark.mllib.tree._\
\
import org.apache.spark.mllib.tree.model._\
\
import org.apache.spark.rdd._\
\
val rawData = sc.textFile("iris.data")\
\
rawData.count\
\
rawData.first\
\
def species (s : String) = \{\
if ("Iris-setosa".equals(s)) \{"Iris-setosa".replaceAll("Iris-setosa", "1")\}\
else if ("Iris-versicolor".equals(s)) \{"Iris-versicolor".replaceAll("Iris-versicolor", "2")\}\
else \{"Iris-virginica".replaceAll("Iris-virginica","4")\}\
\}\
\
def parse (line : String) = \{\
var x = line.split(",")\
x(4) = species(x(4))\
val values = x.map(_.toDouble)\
val featureVector = Vectors.dense(values.init)\
val label = values.last\
LabeledPoint(label, featureVector)\
\}\
\
val data = rawData.map(parse(_))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0
\cf2  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0
\cf0 data.count\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f1\b \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f0\b0 \cf0 data.first\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f1\b \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f0\b0 \cf0 data.foreach(println)\
\
val Array(trainData, cvData, testData) = data.randomSplit(Array(0.8, 0.1, 0.1))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f1\b \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f0\b0 \cf0 trainData.count\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f1\b \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f0\b0 \cf0 cvData.count\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0
\cf0 testData.count\
\
def getMetrics(model: DecisionTreeModel, data:RDD[LabeledPoint]):\
MulticlassMetrics = \{\
val predictionsAndLabels = data.map(example => (model.predict(example.features), example.label) \
)\
new MulticlassMetrics(predictionsAndLabels)\
\}\
\
val model = DecisionTree.trainClassifier(trainData, 5, Map[Int, Int](), "gini", 4, 100)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f1\b \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f0\b0 \cf0 val metrics = getMetrics(model, cvData)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0
\cf0 metrics.confusionMatrix\
\
metrics.precision(1)\
\
metrics.precision(2)\
\
metrics.precision(4)\
\
metrics.recall(1)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0
\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0
\cf0 metrics.recall(2)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f1\b \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f0\b0 \cf0 metrics.recall(4)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f1\b \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f0\b0 \cf0 metrics.accuracy\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f1\b \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f0\b0 \cf0 (0 to 2).map(Math.pow(2.0, _)).map(metrics.precision(_))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f1\b \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f0\b0 \cf0 (0 to 2).map(Math.pow(2.0, _)).map(metrics.recall(_))\
\
val labelAndPreds = cvData.map \{ point =>\
val prediction = model.predict(point.features)\
(point.label, prediction)\
\}\
\
val testErr = labelAndPreds.filter(r => r._1 != r._2).count.toDouble/cvData.count()\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f1\b \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f0\b0 \cf0 labelAndPreds.foreach(println)\
\
println("Test Error = " + testErr)\
\
println("Learned classification tree model: \\n" + model.toDebugString)\
\
val evaluations = \
for (impurity <- Array("gini", "entropy");\
depth <- Array(1, 20);\
bins <- Array(10, 300))\
yield \{\
val model = DecisionTree.trainClassifier(trainData, 5, Map[Int, Int](), impurity, depth, bins)\
val predictionsAndLabels = cvData.map(example => (model.predict(example.features), example.label)\
)\
val mm = new MulticlassMetrics(predictionsAndLabels)\
val accuracy = mm.accuracy\
val precisions = (0 to 2).map(Math.pow(2.0, _)).map(metrics.precision(_))\
((impurity, depth, bins), accuracy, precisions)\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0
\cf0 evaluations.sortBy(_._2).reverse.foreach(println)\
\
val model = DecisionTree.trainClassifier(trainData.union(cvData), 5, Map[Int, Int](), "gini", 20, 10)\
\
val metrics = getMetrics(model, testData)\
\
metrics.confusionMatrix\
\
metrics.precision(1)\
\
metrics.precision(2)\
\
metrics.precision(4)\
\
metrics.recall(1)\
\
metrics.recall(2)\
\
metrics.recall(4)\
\
metrics.accuracy\
\
(0 to 2).map(Math.pow(2.0, _)).map(metrics.precision(_))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f1\b \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f0\b0 \cf0 (0 to 2).map(Math.pow(2.0, _)).map(metrics.recall(_))\
\
val labelAndPreds = testData.map \{ point =>\
val prediction = model.predict(point.features)\
(point.label, prediction)\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f1\b \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ri-1440\partightenfactor0

\f0\b0 \cf0 val testErr = labelAndPreds.filter(r => r._1 != r._2).count.toDouble/testData.count()\
\
labelAndPreds.foreach(println)\
\
println("Test Error = " + testErr)\
\
println("Learned classification tree model: \\n" + model.toDebugString)}