
import org.apache.spark.mllib.linalg._

import org.apache.spark.mllib.regression._

import org.apache.spark.mllib.evaluation._

import org.apache.spark.mllib.tree._

import org.apache.spark.mllib.tree.model._

import org.apache.spark.rdd._

val rawData = sc.textFile("iris.data")

rawData.count

rawData.first

def species (s : String) = {
if ("Iris-setosa".equals(s)) {"Iris-setosa".replaceAll("Iris-setosa", "1")}
else if ("Iris-versicolor".equals(s)) {"Iris-versicolor".replaceAll("Iris-versicolor", "2")}
else {"Iris-virginica".replaceAll("Iris-virginica","4")}
}

def parse (line : String) = {
var x = line.split(",")
x(4) = species(x(4))
val values = x.map(_.toDouble)
val featureVector = Vectors.dense(values.init)
val label = values.last
LabeledPoint(label, featureVector)
}

val data = rawData.map(parse(_))
 
data.count

data.first

data.foreach(println)

val Array(trainData, cvData, testData) = data.randomSplit(Array(0.8, 0.1, 0.1))

trainData.count

cvData.count

testData.count

def getMetrics(model: DecisionTreeModel, data:RDD[LabeledPoint]):
MulticlassMetrics = {
val predictionsAndLabels = data.map(example => (model.predict(example.features), example.label) 
)
new MulticlassMetrics(predictionsAndLabels)
}

val model = DecisionTree.trainClassifier(trainData, 5, Map[Int, Int](), "gini", 4, 100)

val metrics = getMetrics(model, cvData)

metrics.confusionMatrix

metrics.precision(1)

metrics.precision(2)

metrics.precision(4)

metrics.recall(1)

metrics.recall(2)

metrics.recall(4)

metrics.accuracy

(0 to 2).map(Math.pow(2.0, _)).map(metrics.precision(_))

(0 to 2).map(Math.pow(2.0, _)).map(metrics.recall(_))

val labelAndPreds = cvData.map { point =>
val prediction = model.predict(point.features)
(point.label, prediction)
}

val testErr = labelAndPreds.filter(r => r._1 != r._2).count.toDouble/cvData.count()

labelAndPreds.foreach(println)

println("Test Error = " + testErr)

println("Learned classification tree model: \n" + model.toDebugString)

val evaluations = 
for (impurity <- Array("gini", "entropy");
depth <- Array(1, 20);
bins <- Array(10, 300))
yield {
val model = DecisionTree.trainClassifier(trainData, 5, Map[Int, Int](), impurity, depth, bins)
val predictionsAndLabels = cvData.map(example => (model.predict(example.features), example.label)
)
val mm = new MulticlassMetrics(predictionsAndLabels)
val accuracy = mm.accuracy
val precisions = (0 to 2).map(Math.pow(2.0, _)).map(metrics.precision(_))
((impurity, depth, bins), accuracy, precisions)
}

evaluations.sortBy(_._2).reverse.foreach(println)

val model = DecisionTree.trainClassifier(trainData.union(cvData), 5, Map[Int, Int](), "gini", 20, 10)

val metrics = getMetrics(model, testData)

metrics.confusionMatrix

metrics.precision(1)

metrics.precision(2)

metrics.precision(4)

metrics.recall(1)

metrics.recall(2)

metrics.recall(4)

metrics.accuracy

(0 to 2).map(Math.pow(2.0, _)).map(metrics.precision(_))

(0 to 2).map(Math.pow(2.0, _)).map(metrics.recall(_))

val labelAndPreds = testData.map { point =>
val prediction = model.predict(point.features)
(point.label, prediction)
}

val testErr = labelAndPreds.filter(r => r._1 != r._2).count.toDouble/testData.count()

labelAndPreds.foreach(println)

println("Test Error = " + testErr)

println("Learned classification tree model: \n" + model.toDebugString)
